"""Email ingest config

Revision ID: 42459622cc71
Revises: e3c4f8c63e7a
Create Date: 2025-10-28 15:24:15.319883

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy import text

# revision identifiers, used by Alembic.
revision = '42459622cc71'
down_revision = 'e3c4f8c63e7a'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('email_ingest_config',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('is_enabled', sa.Boolean(), nullable=False),
    sa.Column('protocol', sa.String(length=8), nullable=False),
    sa.Column('host', sa.String(length=255), nullable=True),
    sa.Column('port', sa.Integer(), nullable=True),
    sa.Column('use_ssl', sa.Boolean(), nullable=False),
    sa.Column('mailbox', sa.String(length=120), nullable=True),
    sa.Column('username', sa.String(length=255), nullable=True),
    sa.Column('password', sa.String(length=255), nullable=True),
    sa.Column('poll_interval_seconds', sa.Integer(), nullable=False),
    sa.Column('created_by_user_id', sa.Integer(), nullable=True),
    sa.Column('assign_to_user_id', sa.Integer(), nullable=True),
    sa.Column('default_priority', sa.String(length=50), nullable=True),
    sa.Column('default_department', sa.String(length=120), nullable=True),
    sa.Column('last_run_at', sa.DateTime(), nullable=True),
    sa.Column('last_error', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['assign_to_user_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('address_book_entry', schema=None) as batch_op:
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))

    with op.batch_alter_table('assistant_document', schema=None) as batch_op:
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
        batch_op.drop_index(batch_op.f('ix_assistant_document_session_id'))
        batch_op.drop_index(batch_op.f('ix_assistant_document_user_id'))

    with op.batch_alter_table('assistant_message', schema=None) as batch_op:
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
        batch_op.drop_index(batch_op.f('ix_assistant_message_created_at'))
        batch_op.drop_index(batch_op.f('ix_assistant_message_session_id'))

    with op.batch_alter_table('assistant_session', schema=None) as batch_op:
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
        batch_op.drop_index(batch_op.f('ix_assistant_session_user_id'))

    with op.batch_alter_table('auth_config', schema=None) as batch_op:
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))

    with op.batch_alter_table('contract', schema=None) as batch_op:
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))

    connection = op.get_bind()
    duplicates = connection.execute(
        text(
            """
            SELECT asset_tag
            FROM hardware_asset
            WHERE asset_tag IS NOT NULL AND asset_tag <> ''
            GROUP BY asset_tag
            HAVING COUNT(*) > 1
            """
        )
    ).fetchall()

    for row in duplicates:
        asset_tag = row.asset_tag
        rows = connection.execute(
            text(
                """
                SELECT id
                FROM hardware_asset
                WHERE asset_tag = :asset_tag
                ORDER BY id ASC
                """
            ),
            {"asset_tag": asset_tag},
        ).fetchall()
        for idx, asset in enumerate(rows, start=1):
            if idx == 1:
                continue
            suffix = idx - 1
            new_tag = f"{asset_tag}-{suffix}"
            # Ensure the generated tag is unique (handles pre-existing suffixed tags)
            while connection.execute(
                text(
                    """
                    SELECT 1
                    FROM hardware_asset
                    WHERE asset_tag = :candidate
                    LIMIT 1
                    """
                ),
                {"candidate": new_tag},
            ).fetchone():
                suffix += 1
                new_tag = f"{asset_tag}-{suffix}"
            connection.execute(
                text(
                    """
                    UPDATE hardware_asset
                    SET asset_tag = :new_tag
                    WHERE id = :asset_id
                    """
                ),
                {"new_tag": new_tag[:255], "asset_id": asset.id},
            )

    with op.batch_alter_table('hardware_asset', schema=None) as batch_op:
        batch_op.create_unique_constraint(None, ['asset_tag'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('hardware_asset', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')

    with op.batch_alter_table('contract', schema=None) as batch_op:
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))

    with op.batch_alter_table('auth_config', schema=None) as batch_op:
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))

    with op.batch_alter_table('assistant_session', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_assistant_session_user_id'), ['user_id'], unique=False)
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))

    with op.batch_alter_table('assistant_message', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_assistant_message_session_id'), ['session_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_assistant_message_created_at'), ['created_at'], unique=False)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))

    with op.batch_alter_table('assistant_document', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_assistant_document_user_id'), ['user_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_assistant_document_session_id'), ['session_id'], unique=False)
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))

    with op.batch_alter_table('address_book_entry', schema=None) as batch_op:
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))

    op.drop_table('email_ingest_config')
    # ### end Alembic commands ###
